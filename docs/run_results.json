{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.16", "generated_at": "2024-07-16T08:31:31.659963Z", "invocation_id": "da0356d7-585b-48e6-9eb6-bed4c9da1c98", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.725886Z", "completed_at": "2024-07-16T08:31:19.757587Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.758968Z", "completed_at": "2024-07-16T08:31:19.758981Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.039441823959350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"account_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.751269Z", "completed_at": "2024-07-16T08:31:19.758333Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.760629Z", "completed_at": "2024-07-16T08:31:19.760632Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03880667686462402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.748312Z", "completed_at": "2024-07-16T08:31:19.758743Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.761051Z", "completed_at": "2024-07-16T08:31:19.761054Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04049801826477051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"address_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.754477Z", "completed_at": "2024-07-16T08:31:19.759541Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.762505Z", "completed_at": "2024-07-16T08:31:19.762509Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03984975814819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.766115Z", "completed_at": "2024-07-16T08:31:19.774179Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.781686Z", "completed_at": "2024-07-16T08:31:19.781696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020062923431396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.771081Z", "completed_at": "2024-07-16T08:31:19.781432Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.784055Z", "completed_at": "2024-07-16T08:31:19.784063Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020392179489135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.774802Z", "completed_at": "2024-07-16T08:31:19.782158Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.785035Z", "completed_at": "2024-07-16T08:31:19.785039Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020857810974121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.778456Z", "completed_at": "2024-07-16T08:31:19.782738Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.785816Z", "completed_at": "2024-07-16T08:31:19.785819Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01700115203857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_item_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.788752Z", "completed_at": "2024-07-16T08:31:19.796849Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.805831Z", "completed_at": "2024-07-16T08:31:19.805838Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020701169967651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.793029Z", "completed_at": "2024-07-16T08:31:19.807569Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.813346Z", "completed_at": "2024-07-16T08:31:19.813351Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028918981552124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_card_payment_txn variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_card_payment_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.799931Z", "completed_at": "2024-07-16T08:31:19.807825Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.813834Z", "completed_at": "2024-07-16T08:31:19.813837Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025512218475341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.797103Z", "completed_at": "2024-07-16T08:31:19.811994Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.817504Z", "completed_at": "2024-07-16T08:31:19.817509Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026971817016601562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.814074Z", "completed_at": "2024-07-16T08:31:19.819325Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.838085Z", "completed_at": "2024-07-16T08:31:19.838097Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08138298988342285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"customer_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.890963Z", "completed_at": "2024-07-16T08:31:19.940015Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.943199Z", "completed_at": "2024-07-16T08:31:19.943208Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.11967778205871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.840712Z", "completed_at": "2024-07-16T08:31:19.940912Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.943483Z", "completed_at": "2024-07-16T08:31:19.943487Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1333160400390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"department_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.868749Z", "completed_at": "2024-07-16T08:31:19.941193Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.943780Z", "completed_at": "2024-07-16T08:31:19.943783Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12975215911865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.944050Z", "completed_at": "2024-07-16T08:31:19.959239Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.970615Z", "completed_at": "2024-07-16T08:31:19.970628Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036331892013549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.966853Z", "completed_at": "2024-07-16T08:31:19.978978Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.981319Z", "completed_at": "2024-07-16T08:31:19.981326Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02935504913330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.974447Z", "completed_at": "2024-07-16T08:31:19.980101Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.986182Z", "completed_at": "2024-07-16T08:31:19.986194Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022333860397338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.971032Z", "completed_at": "2024-07-16T08:31:19.980603Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.987098Z", "completed_at": "2024-07-16T08:31:19.987102Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.026242971420288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.981774Z", "completed_at": "2024-07-16T08:31:19.988223Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:19.990739Z", "completed_at": "2024-07-16T08:31:19.990746Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015372037887573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.991537Z", "completed_at": "2024-07-16T08:31:20.001332Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.005778Z", "completed_at": "2024-07-16T08:31:20.005784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0174558162689209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.995282Z", "completed_at": "2024-07-16T08:31:20.001935Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.006304Z", "completed_at": "2024-07-16T08:31:20.006307Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017537832260131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"item_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:19.998128Z", "completed_at": "2024-07-16T08:31:20.002478Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.007298Z", "completed_at": "2024-07-16T08:31:20.007301Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01766514778137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.002727Z", "completed_at": "2024-07-16T08:31:20.007071Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.009587Z", "completed_at": "2024-07-16T08:31:20.009590Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009979009628295898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.011703Z", "completed_at": "2024-07-16T08:31:20.024410Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.025671Z", "completed_at": "2024-07-16T08:31:20.025677Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017540931701660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.015812Z", "completed_at": "2024-07-16T08:31:20.024681Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.026365Z", "completed_at": "2024-07-16T08:31:20.026369Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017544984817504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"payment_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.018892Z", "completed_at": "2024-07-16T08:31:20.025185Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.027292Z", "completed_at": "2024-07-16T08:31:20.027295Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017490148544311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.021610Z", "completed_at": "2024-07-16T08:31:20.025903Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.028285Z", "completed_at": "2024-07-16T08:31:20.028288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011191606521606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.031719Z", "completed_at": "2024-07-16T08:31:20.044421Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.045065Z", "completed_at": "2024-07-16T08:31:20.045072Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016570091247558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.035067Z", "completed_at": "2024-07-16T08:31:20.045323Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.047613Z", "completed_at": "2024-07-16T08:31:20.047617Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018726825714111328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.039042Z", "completed_at": "2024-07-16T08:31:20.046101Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.048323Z", "completed_at": "2024-07-16T08:31:20.048328Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01873779296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.041640Z", "completed_at": "2024-07-16T08:31:20.046324Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.048596Z", "completed_at": "2024-07-16T08:31:20.048599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01613593101501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.051257Z", "completed_at": "2024-07-16T08:31:20.060983Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.081052Z", "completed_at": "2024-07-16T08:31:20.081065Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.034713029861450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.067698Z", "completed_at": "2024-07-16T08:31:20.081634Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.085506Z", "completed_at": "2024-07-16T08:31:20.085512Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028597116470336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.061687Z", "completed_at": "2024-07-16T08:31:20.081979Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.085832Z", "completed_at": "2024-07-16T08:31:20.085835Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030102968215942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.074190Z", "completed_at": "2024-07-16T08:31:20.084340Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.088164Z", "completed_at": "2024-07-16T08:31:20.088169Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030763864517211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"transfer_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.090448Z", "completed_at": "2024-07-16T08:31:20.096432Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.105047Z", "completed_at": "2024-07-16T08:31:20.105055Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019895076751708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.103187Z", "completed_at": "2024-07-16T08:31:20.104237Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.107143Z", "completed_at": "2024-07-16T08:31:20.107149Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012969970703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.100228Z", "completed_at": "2024-07-16T08:31:20.106739Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.110277Z", "completed_at": "2024-07-16T08:31:20.110282Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017470121383666992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.096999Z", "completed_at": "2024-07-16T08:31:20.107869Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.111145Z", "completed_at": "2024-07-16T08:31:20.111149Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021790027618408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.112654Z", "completed_at": "2024-07-16T08:31:20.114825Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.119537Z", "completed_at": "2024-07-16T08:31:20.119543Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01132512092590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.118302Z", "completed_at": "2024-07-16T08:31:20.119268Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.122316Z", "completed_at": "2024-07-16T08:31:20.122320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01283121109008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.121113Z", "completed_at": "2024-07-16T08:31:20.122000Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.126230Z", "completed_at": "2024-07-16T08:31:20.126234Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010154962539672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.122893Z", "completed_at": "2024-07-16T08:31:20.124042Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.127237Z", "completed_at": "2024-07-16T08:31:20.127245Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01152181625366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.128984Z", "completed_at": "2024-07-16T08:31:20.130769Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.135128Z", "completed_at": "2024-07-16T08:31:20.135135Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011101961135864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.133543Z", "completed_at": "2024-07-16T08:31:20.134774Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.139284Z", "completed_at": "2024-07-16T08:31:20.139289Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013074874877929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.136972Z", "completed_at": "2024-07-16T08:31:20.138987Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.142381Z", "completed_at": "2024-07-16T08:31:20.142386Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010368824005126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.139771Z", "completed_at": "2024-07-16T08:31:20.140710Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.143090Z", "completed_at": "2024-07-16T08:31:20.143093Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01041412353515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bundle_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.144318Z", "completed_at": "2024-07-16T08:31:20.145306Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.148391Z", "completed_at": "2024-07-16T08:31:20.148395Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00791311264038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.credit_card_payment_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.147265Z", "completed_at": "2024-07-16T08:31:20.148158Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.151665Z", "completed_at": "2024-07-16T08:31:20.151669Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010776996612548828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.credit_memo_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.150325Z", "completed_at": "2024-07-16T08:31:20.151371Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.155463Z", "completed_at": "2024-07-16T08:31:20.155468Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009682178497314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.credit_memo_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.152150Z", "completed_at": "2024-07-16T08:31:20.153894Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.156194Z", "completed_at": "2024-07-16T08:31:20.156197Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010048151016235352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.157260Z", "completed_at": "2024-07-16T08:31:20.158234Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.161304Z", "completed_at": "2024-07-16T08:31:20.161308Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007489919662475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.160128Z", "completed_at": "2024-07-16T08:31:20.161049Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.163959Z", "completed_at": "2024-07-16T08:31:20.163962Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008919000625610352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.deposit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.162839Z", "completed_at": "2024-07-16T08:31:20.163725Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.166630Z", "completed_at": "2024-07-16T08:31:20.166633Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007855892181396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.deposit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.164398Z", "completed_at": "2024-07-16T08:31:20.165246Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.167276Z", "completed_at": "2024-07-16T08:31:20.167279Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008048057556152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.estimate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.168234Z", "completed_at": "2024-07-16T08:31:20.169173Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.173008Z", "completed_at": "2024-07-16T08:31:20.173012Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008010149002075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.estimate_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.171108Z", "completed_at": "2024-07-16T08:31:20.172758Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.175733Z", "completed_at": "2024-07-16T08:31:20.175736Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009775876998901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.174588Z", "completed_at": "2024-07-16T08:31:20.175470Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.178551Z", "completed_at": "2024-07-16T08:31:20.178555Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00892019271850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_line_bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.176184Z", "completed_at": "2024-07-16T08:31:20.177037Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.179236Z", "completed_at": "2024-07-16T08:31:20.179240Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008638381958007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.180283Z", "completed_at": "2024-07-16T08:31:20.181333Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.185088Z", "completed_at": "2024-07-16T08:31:20.185092Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008266210556030273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.183790Z", "completed_at": "2024-07-16T08:31:20.184820Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.187938Z", "completed_at": "2024-07-16T08:31:20.187942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03950166702270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.186753Z", "completed_at": "2024-07-16T08:31:20.187681Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.220337Z", "completed_at": "2024-07-16T08:31:20.220341Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038066864013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.journal_entry_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.188428Z", "completed_at": "2024-07-16T08:31:20.218547Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.221066Z", "completed_at": "2024-07-16T08:31:20.221069Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03829622268676758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.journal_entry_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.222064Z", "completed_at": "2024-07-16T08:31:20.223085Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.226840Z", "completed_at": "2024-07-16T08:31:20.226844Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008295059204101562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.225574Z", "completed_at": "2024-07-16T08:31:20.226557Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.229769Z", "completed_at": "2024-07-16T08:31:20.229773Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010113000869750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.228535Z", "completed_at": "2024-07-16T08:31:20.229492Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.232710Z", "completed_at": "2024-07-16T08:31:20.232714Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008682966232299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.230277Z", "completed_at": "2024-07-16T08:31:20.231186Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.233397Z", "completed_at": "2024-07-16T08:31:20.233400Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008733034133911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.234412Z", "completed_at": "2024-07-16T08:31:20.235400Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.239728Z", "completed_at": "2024-07-16T08:31:20.239736Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008755922317504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.237620Z", "completed_at": "2024-07-16T08:31:20.239427Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.242627Z", "completed_at": "2024-07-16T08:31:20.242631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010571002960205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.241433Z", "completed_at": "2024-07-16T08:31:20.242368Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.245460Z", "completed_at": "2024-07-16T08:31:20.245463Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00931096076965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.243121Z", "completed_at": "2024-07-16T08:31:20.244023Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.246123Z", "completed_at": "2024-07-16T08:31:20.246127Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008622884750366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.refund_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.247254Z", "completed_at": "2024-07-16T08:31:20.248147Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.251724Z", "completed_at": "2024-07-16T08:31:20.251729Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008049249649047852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.refund_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.250348Z", "completed_at": "2024-07-16T08:31:20.251408Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.255467Z", "completed_at": "2024-07-16T08:31:20.255471Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010622024536132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.sales_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.253480Z", "completed_at": "2024-07-16T08:31:20.255210Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.258260Z", "completed_at": "2024-07-16T08:31:20.258264Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009372949600219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.sales_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.255960Z", "completed_at": "2024-07-16T08:31:20.256824Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.258912Z", "completed_at": "2024-07-16T08:31:20.258915Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009190797805786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.259876Z", "completed_at": "2024-07-16T08:31:20.260784Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.263826Z", "completed_at": "2024-07-16T08:31:20.263830Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007158041000366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.vendor_credit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.262638Z", "completed_at": "2024-07-16T08:31:20.263563Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.266481Z", "completed_at": "2024-07-16T08:31:20.266484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014541864395141602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.vendor_credit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.265358Z", "completed_at": "2024-07-16T08:31:20.266241Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:20.274707Z", "completed_at": "2024-07-16T08:31:20.274710Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013387918472290039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.286688Z", "completed_at": "2024-07-16T08:31:21.253780Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:21.254287Z", "completed_at": "2024-07-16T08:31:21.254294Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0730466842651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.276465Z", "completed_at": "2024-07-16T08:31:21.286616Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:21.287079Z", "completed_at": "2024-07-16T08:31:21.287083Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1102709770202637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.266924Z", "completed_at": "2024-07-16T08:31:21.273118Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:21.273572Z", "completed_at": "2024-07-16T08:31:21.273575Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1296477317810059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:20.282166Z", "completed_at": "2024-07-16T08:31:21.295893Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:21.296345Z", "completed_at": "2024-07-16T08:31:21.296349Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1181910037994385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:21.357962Z", "completed_at": "2024-07-16T08:31:22.277461Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:22.278005Z", "completed_at": "2024-07-16T08:31:22.278016Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0189108848571777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:21.389186Z", "completed_at": "2024-07-16T08:31:22.305700Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:22.306161Z", "completed_at": "2024-07-16T08:31:22.306165Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.021941900253296, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:21.401551Z", "completed_at": "2024-07-16T08:31:22.324730Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:22.325180Z", "completed_at": "2024-07-16T08:31:22.325184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0222980976104736, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:21.396623Z", "completed_at": "2024-07-16T08:31:22.325619Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:22.326074Z", "completed_at": "2024-07-16T08:31:22.326077Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0306141376495361, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:22.379284Z", "completed_at": "2024-07-16T08:31:23.343249Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:23.343783Z", "completed_at": "2024-07-16T08:31:23.343798Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0570108890533447, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:22.411609Z", "completed_at": "2024-07-16T08:31:23.363269Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:23.363746Z", "completed_at": "2024-07-16T08:31:23.363751Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0525250434875488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice_bundle variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_card_payment_id,\n        amount,\n        bank_account_id,\n        credit_card_account_id,\n        created_at,\n        updated_at,\n        currency_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        row_number() over (partition by id, updated_at, source_relation order by source_relation, updated_at desc) = 1 as is_most_recent_record,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:22.419485Z", "completed_at": "2024-07-16T08:31:23.421205Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:23.422235Z", "completed_at": "2024-07-16T08:31:23.422241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1095342636108398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:22.427920Z", "completed_at": "2024-07-16T08:31:23.421491Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:23.422477Z", "completed_at": "2024-07-16T08:31:23.422480Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1113080978393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:23.464586Z", "completed_at": "2024-07-16T08:31:24.467198Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:24.486652Z", "completed_at": "2024-07-16T08:31:24.486680Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1408851146697998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:23.436606Z", "completed_at": "2024-07-16T08:31:24.576245Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:24.577137Z", "completed_at": "2024-07-16T08:31:24.577145Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2373368740081787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:23.532301Z", "completed_at": "2024-07-16T08:31:24.576777Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:24.577823Z", "completed_at": "2024-07-16T08:31:24.577827Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.143669843673706, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:23.540514Z", "completed_at": "2024-07-16T08:31:24.624729Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:24.625225Z", "completed_at": "2024-07-16T08:31:24.625231Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1781771183013916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:24.606100Z", "completed_at": "2024-07-16T08:31:25.538414Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:25.538926Z", "completed_at": "2024-07-16T08:31:25.538936Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0660741329193115, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:24.719062Z", "completed_at": "2024-07-16T08:31:25.673422Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:25.679294Z", "completed_at": "2024-07-16T08:31:25.679297Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0649070739746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:24.676080Z", "completed_at": "2024-07-16T08:31:25.672311Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:25.673883Z", "completed_at": "2024-07-16T08:31:25.673887Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1090691089630127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:24.682087Z", "completed_at": "2024-07-16T08:31:25.673209Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:25.679002Z", "completed_at": "2024-07-16T08:31:25.679007Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1090800762176514, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:25.674528Z", "completed_at": "2024-07-16T08:31:26.688209Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:26.688810Z", "completed_at": "2024-07-16T08:31:26.688817Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.127967119216919, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:25.787073Z", "completed_at": "2024-07-16T08:31:26.817271Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:26.823919Z", "completed_at": "2024-07-16T08:31:26.823926Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1335821151733398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:25.791857Z", "completed_at": "2024-07-16T08:31:26.818830Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:26.825064Z", "completed_at": "2024-07-16T08:31:26.825067Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1408250331878662, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:25.796200Z", "completed_at": "2024-07-16T08:31:26.817600Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:26.824419Z", "completed_at": "2024-07-16T08:31:26.824422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1410870552062988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:26.819282Z", "completed_at": "2024-07-16T08:31:27.803825Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:27.804342Z", "completed_at": "2024-07-16T08:31:27.804355Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0853619575500488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:26.920932Z", "completed_at": "2024-07-16T08:31:27.902967Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:27.904973Z", "completed_at": "2024-07-16T08:31:27.904976Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1049318313598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:26.938293Z", "completed_at": "2024-07-16T08:31:27.903516Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:27.905380Z", "completed_at": "2024-07-16T08:31:27.905383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1171557903289795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:26.932283Z", "completed_at": "2024-07-16T08:31:27.902710Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:27.904738Z", "completed_at": "2024-07-16T08:31:27.904742Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1201729774475098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:27.905984Z", "completed_at": "2024-07-16T08:31:28.907784Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:28.908273Z", "completed_at": "2024-07-16T08:31:28.908287Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1635792255401611, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_order_id\n    \n as \n    \n    purchase_order_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as TEXT) as purchase_order_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:28.057122Z", "completed_at": "2024-07-16T08:31:29.074643Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:29.080899Z", "completed_at": "2024-07-16T08:31:29.080904Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.126502275466919, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:28.029945Z", "completed_at": "2024-07-16T08:31:29.073987Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:29.075712Z", "completed_at": "2024-07-16T08:31:29.075717Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1576311588287354, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    purchase_order_id\n    \n as \n    \n    purchase_order_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as TEXT) as purchase_order_id,\n        cast(bill_id as TEXT) as bill_id,\n        cast(purchase_id as TEXT) as purchase_id,\n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:28.052037Z", "completed_at": "2024-07-16T08:31:29.075288Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:29.081554Z", "completed_at": "2024-07-16T08:31:29.081558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1350250244140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_customer_type\n    \n as \n    \n    custom_customer_type\n    \n, \n    cast(null as TEXT) as \n    \n    custom_po_number\n    \n , \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_address_id\n    \n as \n    \n    vendor_address_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as purchase_order_id,\n        created_at,\n        custom_po_number,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        total_amount,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        status,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:29.075943Z", "completed_at": "2024-07-16T08:31:30.076723Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:30.077215Z", "completed_at": "2024-07-16T08:31:30.077224Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1107499599456787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:29.191841Z", "completed_at": "2024-07-16T08:31:30.185808Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:30.186848Z", "completed_at": "2024-07-16T08:31:30.186852Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0931439399719238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:29.187465Z", "completed_at": "2024-07-16T08:31:30.240331Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:30.241429Z", "completed_at": "2024-07-16T08:31:30.241436Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.161952018737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:29.179237Z", "completed_at": "2024-07-16T08:31:30.242590Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:30.243036Z", "completed_at": "2024-07-16T08:31:30.243039Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1758060455322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:30.187091Z", "completed_at": "2024-07-16T08:31:31.104762Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.105279Z", "completed_at": "2024-07-16T08:31:31.105287Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0286951065063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.215815Z", "completed_at": "2024-07-16T08:31:31.223426Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.223901Z", "completed_at": "2024-07-16T08:31:31.223906Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009006023406982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.225332Z", "completed_at": "2024-07-16T08:31:31.231344Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.231844Z", "completed_at": "2024-07-16T08:31:31.231848Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007438182830810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.242103Z", "completed_at": "2024-07-16T08:31:31.245504Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.245970Z", "completed_at": "2024-07-16T08:31:31.245973Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004868984222412109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.247395Z", "completed_at": "2024-07-16T08:31:31.253004Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.253510Z", "completed_at": "2024-07-16T08:31:31.253515Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0070378780364990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.254973Z", "completed_at": "2024-07-16T08:31:31.258614Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.259072Z", "completed_at": "2024-07-16T08:31:31.259076Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005000114440917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.260465Z", "completed_at": "2024-07-16T08:31:31.262965Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.263402Z", "completed_at": "2024-07-16T08:31:31.263406Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003810882568359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.264818Z", "completed_at": "2024-07-16T08:31:31.267778Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.268228Z", "completed_at": "2024-07-16T08:31:31.268232Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004296064376831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.269621Z", "completed_at": "2024-07-16T08:31:31.272121Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.272553Z", "completed_at": "2024-07-16T08:31:31.272557Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003798961639404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.273949Z", "completed_at": "2024-07-16T08:31:31.276917Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.277378Z", "completed_at": "2024-07-16T08:31:31.277382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004317045211791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.278776Z", "completed_at": "2024-07-16T08:31:31.282204Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.282649Z", "completed_at": "2024-07-16T08:31:31.282652Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004751920700073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.284050Z", "completed_at": "2024-07-16T08:31:31.286716Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.287174Z", "completed_at": "2024-07-16T08:31:31.287178Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0040090084075927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.288556Z", "completed_at": "2024-07-16T08:31:31.291069Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.291501Z", "completed_at": "2024-07-16T08:31:31.291505Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003810882568359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:30.280949Z", "completed_at": "2024-07-16T08:31:31.197610Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.198069Z", "completed_at": "2024-07-16T08:31:31.198073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0156540870666504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.292857Z", "completed_at": "2024-07-16T08:31:31.295701Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.296912Z", "completed_at": "2024-07-16T08:31:31.296916Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005276918411254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.298370Z", "completed_at": "2024-07-16T08:31:31.303880Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.304343Z", "completed_at": "2024-07-16T08:31:31.304346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0078029632568359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.301521Z", "completed_at": "2024-07-16T08:31:31.304555Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.305697Z", "completed_at": "2024-07-16T08:31:31.305700Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005484104156494141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.307223Z", "completed_at": "2024-07-16T08:31:31.314219Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.327382Z", "completed_at": "2024-07-16T08:31:31.327388Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022151947021484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.311605Z", "completed_at": "2024-07-16T08:31:31.326583Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.327659Z", "completed_at": "2024-07-16T08:31:31.327662Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01752614974975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.331255Z", "completed_at": "2024-07-16T08:31:31.337360Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.338248Z", "completed_at": "2024-07-16T08:31:31.338253Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009147882461547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.334218Z", "completed_at": "2024-07-16T08:31:31.337590Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.338495Z", "completed_at": "2024-07-16T08:31:31.338497Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009446144104003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:30.355590Z", "completed_at": "2024-07-16T08:31:31.244611Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.245085Z", "completed_at": "2024-07-16T08:31:31.245090Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.985400915145874, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.342403Z", "completed_at": "2024-07-16T08:31:31.350636Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.351780Z", "completed_at": "2024-07-16T08:31:31.351785Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01187586784362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.345037Z", "completed_at": "2024-07-16T08:31:31.350867Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.352219Z", "completed_at": "2024-07-16T08:31:31.352221Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012231826782226562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.347710Z", "completed_at": "2024-07-16T08:31:31.351350Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.352896Z", "completed_at": "2024-07-16T08:31:31.352899Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01190185546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.356066Z", "completed_at": "2024-07-16T08:31:31.364830Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.365552Z", "completed_at": "2024-07-16T08:31:31.365557Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01190495491027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.358785Z", "completed_at": "2024-07-16T08:31:31.365289Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.366905Z", "completed_at": "2024-07-16T08:31:31.366909Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012729883193969727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.362389Z", "completed_at": "2024-07-16T08:31:31.365791Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.367398Z", "completed_at": "2024-07-16T08:31:31.367402Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01296091079711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.369971Z", "completed_at": "2024-07-16T08:31:31.378797Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.379389Z", "completed_at": "2024-07-16T08:31:31.379396Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012205123901367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.376100Z", "completed_at": "2024-07-16T08:31:31.379616Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.381250Z", "completed_at": "2024-07-16T08:31:31.381255Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009493112564086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.373569Z", "completed_at": "2024-07-16T08:31:31.379852Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.381498Z", "completed_at": "2024-07-16T08:31:31.381501Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013043880462646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.383574Z", "completed_at": "2024-07-16T08:31:31.391376Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.394319Z", "completed_at": "2024-07-16T08:31:31.394325Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013024091720581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.387243Z", "completed_at": "2024-07-16T08:31:31.395056Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.396569Z", "completed_at": "2024-07-16T08:31:31.396573Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01135110855102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.391607Z", "completed_at": "2024-07-16T08:31:31.395310Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.396827Z", "completed_at": "2024-07-16T08:31:31.396830Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011449098587036133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.398154Z", "completed_at": "2024-07-16T08:31:31.402378Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.407905Z", "completed_at": "2024-07-16T08:31:31.407910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012115001678466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.402626Z", "completed_at": "2024-07-16T08:31:31.408947Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.410329Z", "completed_at": "2024-07-16T08:31:31.410333Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012987852096557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.405267Z", "completed_at": "2024-07-16T08:31:31.409176Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.410562Z", "completed_at": "2024-07-16T08:31:31.410565Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013108015060424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.410784Z", "completed_at": "2024-07-16T08:31:31.415605Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.417140Z", "completed_at": "2024-07-16T08:31:31.417144Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013084173202514648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.417375Z", "completed_at": "2024-07-16T08:31:31.426133Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.427118Z", "completed_at": "2024-07-16T08:31:31.427122Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012125968933105469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.419896Z", "completed_at": "2024-07-16T08:31:31.426373Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.427571Z", "completed_at": "2024-07-16T08:31:31.427575Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012427806854248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.423712Z", "completed_at": "2024-07-16T08:31:31.427340Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.429167Z", "completed_at": "2024-07-16T08:31:31.429170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006975889205932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:30.349429Z", "completed_at": "2024-07-16T08:31:31.328788Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.330422Z", "completed_at": "2024-07-16T08:31:31.330425Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1349241733551025, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.431394Z", "completed_at": "2024-07-16T08:31:31.483278Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.485173Z", "completed_at": "2024-07-16T08:31:31.485178Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.056999921798706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.434724Z", "completed_at": "2024-07-16T08:31:31.484858Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.487386Z", "completed_at": "2024-07-16T08:31:31.487390Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.061305999755859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.480129Z", "completed_at": "2024-07-16T08:31:31.485610Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.487901Z", "completed_at": "2024-07-16T08:31:31.487904Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05846905708312988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.488137Z", "completed_at": "2024-07-16T08:31:31.494346Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.499431Z", "completed_at": "2024-07-16T08:31:31.499438Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021173954010009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.495060Z", "completed_at": "2024-07-16T08:31:31.502683Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.508472Z", "completed_at": "2024-07-16T08:31:31.508477Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017621994018554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.499781Z", "completed_at": "2024-07-16T08:31:31.508197Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.510540Z", "completed_at": "2024-07-16T08:31:31.510543Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019676923751831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.503012Z", "completed_at": "2024-07-16T08:31:31.508714Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.511044Z", "completed_at": "2024-07-16T08:31:31.511048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016878843307495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.511298Z", "completed_at": "2024-07-16T08:31:31.516152Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.520860Z", "completed_at": "2024-07-16T08:31:31.520865Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017420053482055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.516741Z", "completed_at": "2024-07-16T08:31:31.525985Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.527750Z", "completed_at": "2024-07-16T08:31:31.527753Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014327049255371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.521104Z", "completed_at": "2024-07-16T08:31:31.527287Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.529407Z", "completed_at": "2024-07-16T08:31:31.529411Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01723003387451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.523531Z", "completed_at": "2024-07-16T08:31:31.527520Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.529641Z", "completed_at": "2024-07-16T08:31:31.529647Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01423192024230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.530113Z", "completed_at": "2024-07-16T08:31:31.535430Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.540136Z", "completed_at": "2024-07-16T08:31:31.540143Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019159793853759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.536289Z", "completed_at": "2024-07-16T08:31:31.546618Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.548533Z", "completed_at": "2024-07-16T08:31:31.548539Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015496969223022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation.e47fe7ae13", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_order_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\"\n    group by purchase_order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.543038Z", "completed_at": "2024-07-16T08:31:31.548293Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.550629Z", "completed_at": "2024-07-16T08:31:31.550637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018636226654052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.540407Z", "completed_at": "2024-07-16T08:31:31.548786Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.551128Z", "completed_at": "2024-07-16T08:31:31.551131Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019810914993286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id.210718c1c7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\"\nwhere purchase_order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.551360Z", "completed_at": "2024-07-16T08:31:31.556398Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.561158Z", "completed_at": "2024-07-16T08:31:31.561165Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0171358585357666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.557388Z", "completed_at": "2024-07-16T08:31:31.566511Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.570752Z", "completed_at": "2024-07-16T08:31:31.570757Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017035961151123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.561643Z", "completed_at": "2024-07-16T08:31:31.570099Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.572303Z", "completed_at": "2024-07-16T08:31:31.572307Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0193479061126709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.a86f736065", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Open','Closed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.566752Z", "completed_at": "2024-07-16T08:31:31.571280Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.576669Z", "completed_at": "2024-07-16T08:31:31.576682Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017840147018432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation.1ade9ebad8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_order_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\n    group by purchase_order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.572911Z", "completed_at": "2024-07-16T08:31:31.577892Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.583096Z", "completed_at": "2024-07-16T08:31:31.583104Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017448902130126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.d9f0186f4e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn\"\nwhere purchase_order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.579784Z", "completed_at": "2024-07-16T08:31:31.588177Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.594162Z", "completed_at": "2024-07-16T08:31:31.594169Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01812005043029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id.4158032222", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\nwhere purchase_order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.583834Z", "completed_at": "2024-07-16T08:31:31.593473Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.595866Z", "completed_at": "2024-07-16T08:31:31.595870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021146059036254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.589505Z", "completed_at": "2024-07-16T08:31:31.595586Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.600817Z", "completed_at": "2024-07-16T08:31:31.600822Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01872396469116211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.596101Z", "completed_at": "2024-07-16T08:31:31.601472Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.606572Z", "completed_at": "2024-07-16T08:31:31.606578Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01674199104309082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.603003Z", "completed_at": "2024-07-16T08:31:31.610846Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.615962Z", "completed_at": "2024-07-16T08:31:31.615968Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016522884368896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.607303Z", "completed_at": "2024-07-16T08:31:31.615156Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.617474Z", "completed_at": "2024-07-16T08:31:31.617477Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019437074661254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.612178Z", "completed_at": "2024-07-16T08:31:31.617243Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.622605Z", "completed_at": "2024-07-16T08:31:31.622610Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01697516441345215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.617710Z", "completed_at": "2024-07-16T08:31:31.623157Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.627966Z", "completed_at": "2024-07-16T08:31:31.627970Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01628708839416504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.624745Z", "completed_at": "2024-07-16T08:31:31.632293Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.636594Z", "completed_at": "2024-07-16T08:31:31.636599Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015594005584716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.628638Z", "completed_at": "2024-07-16T08:31:31.635447Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.637346Z", "completed_at": "2024-07-16T08:31:31.637349Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017246007919311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.632856Z", "completed_at": "2024-07-16T08:31:31.637058Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.641985Z", "completed_at": "2024-07-16T08:31:31.641989Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014915227890014648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.638106Z", "completed_at": "2024-07-16T08:31:31.642493Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.644602Z", "completed_at": "2024-07-16T08:31:31.644605Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015944957733154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.644827Z", "completed_at": "2024-07-16T08:31:31.652556Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.655909Z", "completed_at": "2024-07-16T08:31:31.655915Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013856172561645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.648675Z", "completed_at": "2024-07-16T08:31:31.655625Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.657073Z", "completed_at": "2024-07-16T08:31:31.657076Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014269828796386719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T08:31:31.652860Z", "completed_at": "2024-07-16T08:31:31.656836Z"}, {"name": "execute", "started_at": "2024-07-16T08:31:31.658036Z", "completed_at": "2024-07-16T08:31:31.658039Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010188102722167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "relation_name": null}], "elapsed_time": 15.183101177215576, "args": {"print": true, "profiles_dir": "/Users/avinash.kunnath/.dbt", "strict_mode": false, "show_resource_report": false, "indirect_selection": "eager", "which": "generate", "send_anonymous_usage_stats": true, "cache_selected_only": false, "compile": true, "static": false, "use_colors_file": true, "empty_catalog": false, "enable_legacy_logger": false, "log_format": "default", "vars": {}, "write_json": true, "target": "postgres", "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "introspect": true, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests/logs", "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": false, "version_check": true, "printer_width": 80, "favor_state": false, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "quiet": false, "invocation_command": "dbt docs generate -t postgres", "select": [], "log_format_file": "debug", "use_colors": true, "exclude": [], "log_level": "info", "partial_parse": true, "log_level_file": "debug", "defer": false, "populate_cache": true, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true}}